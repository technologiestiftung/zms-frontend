CREATE EXTENSION IF NOT EXISTS "pg_cron" WITH SCHEMA "public" version '1.4';

CREATE TABLE "public"."processes" (
	"id" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"service_id" integer NOT NULL,
	"scheduled_time" timestamp with time zone,
	"start_time" timestamp with time zone,
	"end_time" timestamp with time zone,
	"notes" text,
	"score" real,
	"service_type_id" integer
);

ALTER TABLE "public"."processes" ENABLE ROW LEVEL SECURITY;

CREATE TABLE "public"."profiles" (
	"id" uuid NOT NULL,
	"description" text
);

ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;

CREATE TABLE "public"."service_types" (
	"id" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"name" text
);

ALTER TABLE "public"."service_types" ENABLE ROW LEVEL SECURITY;

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

CREATE UNIQUE INDEX service_types_pkey ON public.service_types USING btree (id);

ALTER TABLE "public"."profiles"
	ADD CONSTRAINT "profiles_pkey" PRIMARY KEY USING INDEX "profiles_pkey";

ALTER TABLE "public"."service_types"
	ADD CONSTRAINT "service_types_pkey" PRIMARY KEY USING INDEX "service_types_pkey";

ALTER TABLE "public"."processes"
	ADD CONSTRAINT "processes_service_type_id_fkey" FOREIGN KEY (service_type_id) REFERENCES service_types (id) ON DELETE SET NULL NOT valid;

ALTER TABLE "public"."processes" validate CONSTRAINT "processes_service_type_id_fkey";

SET check_function_bodies = OFF;

CREATE OR REPLACE FUNCTION public.handle_new_user ()
	RETURNS TRIGGER
	LANGUAGE plpgsql
	SECURITY DEFINER
	SET search_path TO 'public'
	AS $function$
BEGIN
	INSERT INTO public.profiles (id)
		VALUES (NEW.id);
	RETURN new;
END;
$function$;

CREATE POLICY "Enable insert for authenticated users only" ON "public"."processes" AS permissive
	FOR INSERT TO authenticated
		WITH CHECK (TRUE);

CREATE POLICY "Enable read for authenticated users only" ON "public"."processes" AS permissive
	FOR SELECT TO authenticated
		USING (TRUE);

CREATE POLICY "Enable update for authenticated users only" ON "public"."processes" AS permissive
	FOR UPDATE TO authenticated
		WITH CHECK (TRUE);

CREATE POLICY "Enable read for authenticated users only" ON "public"."profiles" AS permissive
	FOR SELECT TO authenticated
		USING (TRUE);

CREATE POLICY "Users can insert their own profile." ON "public"."profiles" AS permissive
	FOR INSERT TO public
		WITH CHECK ((auth.uid () = id));

CREATE POLICY "Users can update own profile." ON "public"."profiles" AS permissive
	FOR UPDATE TO public
		USING ((auth.uid () = id));

CREATE POLICY "Enable read for authenticated users only" ON "public"."service_types" AS permissive
	FOR SELECT TO authenticated
		USING (TRUE);

